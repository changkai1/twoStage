Day一.
一.什么是JS?
	是一门(基于对象)和(事件驱动)的(客户端脚本)语言.
二.哪个公司?哪一年?谁?第一个名字是什么?
	网景公司,1995,布兰登,liveScript
三.w3c第一套标准:    ECMA-262,
四.JS包含哪几总分?
	ECMAScript
	BOM
	DOM
五.如何引入JS?
	1.行内脚本-----事件引入
	2.内部脚本-----<scirpt></script>
	3.外部脚本-----<script src="url"></script>
	注: 外部脚本,标签中最好不要写入任何内容,即使写入,也不执行.
六.有哪个输出方式?区别是什么?
	1.alert() : 以警告框的方式,缺点:会终止后面代码的执行. 主要用来调试代码.
	2.document.write() : 页面中输出,缺点:影响页面布局
	3.console.log() : 输出在控制台中,不影响用户体验,主要用来调试代码,会输出对象的详细信息.,
七.如何实现换行?
	<br> : 用户页面换行,
	转义字符: 将具有特殊含义的符号转成普通字符  转义符: \
	\n : 表示换行, 用于纯JS输出
	\t : 表示空格(一次空8格),相当于tab键,
八.数据类型?
	基本数据类型: Number String Boolean,
	特殊数据类型: Null Undefined,
	复合数据类型: Object,
九.什么是标识符? 标识变量,数组,函数等的有效字符序列
十.标识符的命名规则?
	1.只能包含字母,数字,下划线,$,中文
	2. 不能以数字开头
	3. 不能是保留字或关键字
	4. 语义化(具有相关含义)
	5. 驼峰命名:
		大驼峰 : HowAreYou      一般用于类名(构造函数名)
		小驼峰 : howAreYou,
	6. 匈牙利命名法:
		iNum : 整数,
		fNum : 小数,
		sTr  : 字符串,
		ch : 字符,
		boo : 布尔值,
		obj : 对象,
		arr : 数组,
		fn : 函数,
十一.什么是变量?
	是在内存中开辟空间,用于存储数据,随着程序的运行,该空间中数据会发生变化,所以称为变量
十二.如何声明变量?
	1. 显式声明  var 变量名,变量名,……;
	2. 隐式声明 变量名 = 值;
十三.如何给变量赋值?
	1. 初始化变量   var 变量名 = 3;
	2. 先声明变量,后赋值   var 变量名;   变量名 = 值;
十四. 什么是常量? 永恒不变的量.     如:  3  true false   '3'  "3" null undefined,
十五.运算符
	1. 递增递减运算符  ++    --
	2. 算术运算符
		* 
		/ 
		  注:  一个非0的数除以0 ,结果infinity 无穷,
			   0 / 0    结果: NaN,
		%
		- 
		+
	3. 关系运算符
		> 
		<
		>=
		<=
		==
		!=
		===
		!==
		切记:
		console.log(null == 0); //false
		console.log(null == false); //false
		console.log(null == ''); //false
		console.log(null == undefined); //true
		console.log(null === undefined); //false
	4. 逻辑运算符(false,"",0,null,undefined,NaN)
		!
		&&
			逻辑思想: 左边表达式的值为true时,返回右边表达式的值;左边表达式的值为false时,发生短路,直接 返回左边表达式的值
		||
			逻辑思想: 左边表达式的值为true时,发生短路,直接返回左边表达式的值;左边表达式的值为false时,返回右边表达式的值.,
	5. 三元运算符 ?:
		格式:
			表达式1 ? 表达式2 : 表达式3
			逻辑思想: 计算表达式1的值,值为true,则执行表达式2值false,则执行表达式3,
	6. 赋值运算符:
		1> 简单赋值   =
		2> 复合算术赋值  +=  -=  *= /=  %=  
	7. 特殊运算符:
		1. new : 创建对象,
		2. typeof : 检测数据类型,返回值都是string,
十六. 优先级
	++ -- ! typeof   +(正)   -(负) new
	* / % 
	+  -
	>  <  >= <=
	== !=  ===  !==
	&&
	||
	?:
	= *= -= += /= %=
十七. 数据类型转换
	1.自动转换
	2.强制转换
		1> parseInt("字符串",进制)  : 将有效数字开头的字符串转为整数,否则转NaN,
		第二个参数:进制: 2-36 出范围的结果都是NaN      ,
		0 或省略第二个参数,默认为10进制
		2> parseFloat("字符串") : 将有效数字开头的字符串转为小数,否则转为NaN ,
		3> Nubmer("字符串") : 将纯有效数字的字符串转为数字,否则转为NaN,
十八. 内置函数
	 isNaN() : 判断是否为NaN,
	 eval() : 解析字符串,
	 
Day二
一.程序设计三大结构?
	顺序结构
	选择结构
	循环结构
二.实现选择结构的有哪些语句?
	1. 三元  表达式?语句组 : 语句组
	2. if
			1.单分支选择
			if(表达式){
				语句组;
			}
			2.双分支选择
			if(表达式){
				语句组;
			}else{
				语句组;
			}
			3.多分支选择
			if(表达式){
				语句组;
			}else if(表达式){
				语句组;
			}……{
				语句组;
			}[else{
				语句组;
			}]
	3. switch
		switch(表达式){
			case 表达式 : 语句组; [break;]
			……
			case 表达式 : 语句组; [break;]
			[default : 语句组;]
		}
day三
一.循环思想(循环三要素)
	从哪开始
	到哪结束
	步进
二.实现循环的语句有哪些?
	1.while 
	
		表达式1;
		while(表达式2){
			语句组;
			表达式3;
		}
	2.do while
	
		表达式1;
		do{
			语句组;
			表达式3;
		}while(表达式2);
	3.for
	for(表达式1;表达式2;表达式3){
		语句组;
	}
三.while与do while区别
	1. while是当型循环,先判断条件,后执行语句
	2. do while是直到型循环,先执行语句,后判断条件
	3. 当第一次条件为假时,do while至少执行一次,while一次也不执行
四.无限循环(死循环) : 条件永远为真的循环
	while(1){}
	do {}while(1);
	for(;1;){}
五.break与continue
	break : 1.用于switch,终止switch语句,
					2.用于循环语句,终止一层循环.
	continue : 用于循环语句,终止一次循环.,
六.循环嵌套

Day四
一.什么是函数?
二.函数的作用或好处是什么?
三.函数的分类有哪些?
	1.内置函数(内建函数/库函数/系统函数) : parseInt() /parseFloat()/Number()/isNaN()/eval(),
	2.自定义函数
四.如何定义函数?
	1.语句定义法
		function 函数名([参数]){
			语句组;
		}
	2.表达式定义法
	 var 函数名 = function([参数]){
		 语句组;
	 }
	 3.区别:表达式定义法只能先声明,后调用.,
五.函数的调用:
	1. 一般调用 : 函数名([参数]),
	2. 递归调用 : 自己调用自己,
	3. 事件调用 : 触发事件后,调用函数,
六.函数的参数:
	1.形参: 定义函数所使用的参数
	2.实参: 调用函数时所使用的参数,
	本质 : 将实参的值赋值给形参.,
	
七.返回值: return,
	1. 返回结果
	2. 结束函数
	
总结:
	1. 无参无返回值函数
	2. 无参有返回值函数
	3. 有参无返回值函数
	4. 有参有返回值函数

八.作用域及作用域链

Day五
一.递归调用
	1.自己调用自己的过程,叫递归调用
	2.本质: 实现循环,
二.构造函数
	